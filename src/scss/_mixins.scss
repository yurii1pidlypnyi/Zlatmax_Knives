//Підключенння шрифтів===========================================================================
@mixin font-face($font-family, $url, $weight, $style) {
  @font-face {
    font-family: "#{$font-family}";
    src: url('../fonts/#{$url}.woff2') format("woff2");
    font-weight: #{$weight};
    font-display: swap;
    font-style: $style;
  }
}
//Breackpoints===================================================================================
@mixin desktop {
  @media (min-width: (1024px)) {
    @content;
  }
}

@mixin tablet {
  @media (max-width: (768px)) {
    @content;
  }
}

@mixin mobile {
  @media (max-width: (425px)) {
    @content;
  }
}
//Percent=======================================================================================
@function percent($px, $from) {
	$result: ($px/$from) * 100%;
	@return $result;
}
//REM===========================================================================================
@function rem($px) {
	$result: ($px/16) + rem;
	@return $result;
}
//EM============================================================================================
@function em($px, $current: 16) {
	$result: ($px/$current) + em;
	@return $result;
}
//Grid cards====================================================================================
@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
	display: grid;
	gap: $gap;
	grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
}
//Адаптивне свойство============================================================================
@mixin adaptiveValue($property, $startSize, $minSize, $widthFrom: $containerWidth, $widthTo: $minWidth, $keepSize: 0) {
  //Брейк-поинти в EM
  $widthFromMedia: em($widthFrom);
  $widthToMedia: em($widthTo);
  // Початкове і кінцеве значення в REM
  $minSizeValue: rem($minSize);
  $startSizeValue: rem($startSize);
  // Перераховуємо змінні відносно розміру шрифта за замоувчуванням
  $minWidth: ($minWidth / 16);
  $maxWidth: ($maxWidth / 16);
  $containerWidth: ($containerWidth / 16);
  $addSize: (($startSize - $minSize) / 16);
  $widthTo: ($widthTo / 16);
  $widthFrom: ($widthFrom / 16);
  // Якщо вказано обмеження у контейнера,
  // або вказана початкова або кінцева ширина
  // включаємо режим роботи в проміжку ширин
  @if ($maxWidthContainer > 0 or $widthFrom != $containerWidth or $widthTo != $minWidth) and $widthFrom > $widthTo {
    // Якщо початкова ширина рівна ширині контейнера + відступи,
    // або вказане налаштування "keepSize" ставимо значення
    // за замоувчуванням рівне початковому розміру
    @if $widthFrom == $containerWidth or $keepSize == 1 or $keepSize == 2 {
      @media (min-width: $widthFromMedia) {
        #{$property}: $startSizeValue;
      }
    }
    // Адаптуємо розмір в проміжку між вказаними ширинами вюпорта
    @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
      #{$property}: calc(#{$minSizeValue} + #{$addSize} * (((100vw - #{$widthTo + rem})) / ((#{$widthFrom - $widthTo}))));
    }
    // Якщо кінцева ширина рівна мінімальній ширині
    // або вказане налаштування "keepSize" ставимо значення
    // за замоувчуванням рівне кінцевому розміру
    @if $widthTo == $minWidth or $keepSize == 1 or $keepSize == 3 {
      @media (max-width: $widthToMedia) {
        #{$property}: $minSizeValue;
      }
    }
  } @else {
    // Режим роботи по всій ширині вюпорта
    #{$property}: calc(#{$minSizeValue} + #{$addSize} * (((100vw - #{$widthTo + rem})) / ((#{$maxWidth - $widthTo}))));
  }
}